#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Interface Streamlit pour l'outil de traduction de fichiers SRT
"""

import streamlit as st
import tempfile
import os
from pathlib import Path
import requests
import time
import zipfile
import io
from srt_translator import SRTTranslator

# Dictionnaire de traductions
TRANSLATIONS = {
    'fr': {
        'title': 'üé¨ Traducteur de Sous-titres SRT',
        'config': '‚öôÔ∏è Configuration',
        'ollama': 'ü§ñ Ollama',
        'ollama_url': 'URL Ollama',
        'ollama_url_help': "L'URL de votre instance Ollama",
        'test_connection': 'üîç Tester la connexion',
        'testing_connection': 'Test de connexion...',
        'connection_success': '‚úÖ Connexion r√©ussie !',
        'models_available': 'üìã Mod√®les disponibles: {}',
        'connection_failed': '‚ùå Impossible de se connecter √† Ollama',
        'model_name': 'Mod√®le Ollama',
        'model_help': 'Nom du mod√®le √† utiliser pour la traduction',
        'languages': 'üåç Langues',
        'source_lang': 'Langue source',
        'target_lang': 'Langue cible',
        'about': '‚ÑπÔ∏è √Ä propos',
        'about_text': '''**Traducteur SRT** vous permet de traduire facilement vos fichiers de sous-titres.

**Fonctionnalit√©s:**
- üöÄ Traduction rapide avec Ollama
- üìÅ Support des formats SRT
- üéØ Interface intuitive
- üíæ T√©l√©chargement direct du r√©sultat''',
        'upload_section': 'üìÇ Upload du fichier SRT',
        'upload_mode': 'Mode de traitement',
        'single_file': 'Fichier unique',
        'batch_files': 'Traitement en s√©rie',
        'choose_file': 'Choisissez votre fichier SRT',
        'choose_files': 'Choisissez vos fichiers SRT',
        'choose_file_help': 'S√©lectionnez le fichier de sous-titres √† traduire',
        'choose_files_help': 'S√©lectionnez plusieurs fichiers de sous-titres √† traduire',
        'file_loaded': '‚úÖ Fichier charg√©: **{}** ({} octets)',
        'files_loaded': '‚úÖ {} fichiers charg√©s (Total: {} octets)',
        'batch_processing': 'üîÑ Traitement en s√©rie ({}/{}): {}',
        'batch_completed': 'üéâ Traitement en s√©rie termin√© ! {} fichiers traduits.',
        'batch_success': '‚úÖ Tous les fichiers ont √©t√© traduits avec succ√®s !',
        'initializing': 'Initialisation...',
        'download_all': 'üì¶ T√©l√©charger tous les fichiers (ZIP)',
        'preview_file': 'üëÄ Aper√ßu du fichier',
        'file_truncated': '... (fichier tronqu√© pour l\'aper√ßu)',
        'encoding_warning': '‚ö†Ô∏è Impossible de d√©coder le fichier en UTF-8. La traduction tentera d\'autres encodages.',
        'start_translation': 'üöÄ Lancer la traduction',
        'ollama_connection_error': '‚ùå Impossible de se connecter √† Ollama. V√©rifiez votre configuration.',
        'translation_progress': 'üîÑ Traduction en cours...',
        'entries_found': 'üìã {} entr√©es trouv√©es',
        'translating_entry': 'Traduction {}/{}: {}...',
        'translation_completed': '‚úÖ Traduction termin√©e !',
        'translation_success': 'üéâ Traduction termin√©e avec succ√®s !',
        'translation_error': '‚ùå Erreur lors de la traduction: {}',
        'cancel_translation': 'üõë Annuler la traduction',
        'translation_cancelled': '‚ö†Ô∏è Traduction annul√©e par l\'utilisateur',
        'no_entries_found': 'Aucune entr√©e SRT trouv√©e dans le fichier.',
        'result_section': 'üì• R√©sultat',
        'file_ready': '‚úÖ Fichier traduit pr√™t !',
        'preview_translation': 'üëÄ Aper√ßu de la traduction',
        'preview_truncated': '... (aper√ßu tronqu√©)',
        'download_file': 'üíæ T√©l√©charger le fichier traduit',
        'statistics': 'üìä Statistiques',
        'total_lines': 'Lignes totales',
        'translated_entries': 'Entr√©es traduites',
        'upload_info': 'üëÜ Uploadez un fichier SRT et lancez la traduction pour voir le r√©sultat ici',
        'usage_guide': 'üìñ Guide d\'utilisation',
        'usage_steps': '''**√âtapes simples :**

1. **Configurer Ollama** dans la barre lat√©rale
2. **Choisir les langues** source et cible
3. **Uploader votre fichier SRT**
4. **Cliquer sur "Lancer la traduction"**
5. **T√©l√©charger le r√©sultat** !

**Format SRT support√© :**
```
1
00:00:01,000 --> 00:00:04,000
Hello, world!

2
00:00:05,000 --> 00:00:08,000
How are you today?
```''',
        'interface_language': 'üåê Langue de l\'interface'
    },
    'en': {
        'title': 'üé¨ SRT Subtitle Translator',
        'config': '‚öôÔ∏è Configuration',
        'ollama': 'ü§ñ Ollama',
        'ollama_url': 'Ollama URL',
        'ollama_url_help': 'The URL of your Ollama instance',
        'test_connection': 'üîç Test connection',
        'testing_connection': 'Testing connection...',
        'connection_success': '‚úÖ Connection successful!',
        'models_available': 'üìã Available models: {}',
        'connection_failed': '‚ùå Unable to connect to Ollama',
        'model_name': 'Ollama Model',
        'model_help': 'Name of the model to use for translation',
        'languages': 'üåç Languages',
        'source_lang': 'Source language',
        'target_lang': 'Target language',
        'about': '‚ÑπÔ∏è About',
        'about_text': '''**SRT Translator** allows you to easily translate your subtitle files.

**Features:**
- üöÄ Fast translation with Ollama
- üìÅ SRT format support
- üéØ Intuitive interface
- üíæ Direct result download''',
        'upload_section': 'üìÇ SRT File Upload',
        'upload_mode': 'Processing Mode',
        'single_file': 'Single File',
        'batch_files': 'Batch Processing',
        'choose_file': 'Choose your SRT file',
        'choose_files': 'Choose your SRT files',
        'choose_file_help': 'Select the subtitle file to translate',
        'choose_files_help': 'Select multiple subtitle files to translate',
        'file_loaded': '‚úÖ File loaded: **{}** ({} bytes)',
        'files_loaded': '‚úÖ {} files loaded (Total: {} bytes)',
        'batch_processing': 'üîÑ Batch processing ({}/{}): {}',
        'batch_completed': 'üéâ Batch processing completed! {} files translated.',
        'batch_success': '‚úÖ All files have been successfully translated!',
        'initializing': 'Initializing...',
        'download_all': 'üì¶ Download all files (ZIP)',
        'preview_file': 'üëÄ File preview',
        'file_truncated': '... (file truncated for preview)',
        'encoding_warning': '‚ö†Ô∏è Unable to decode file as UTF-8. Translation will try other encodings.',
        'start_translation': 'üöÄ Start translation',
        'ollama_connection_error': '‚ùå Unable to connect to Ollama. Check your configuration.',
        'translation_progress': 'üîÑ Translation in progress...',
        'entries_found': 'üìã {} entries found',
        'translating_entry': 'Translating {}/{}: {}...',
        'translation_completed': '‚úÖ Translation completed!',
        'translation_success': 'üéâ Translation completed successfully!',
        'translation_error': '‚ùå Translation error: {}',
        'cancel_translation': 'üõë Cancel translation',
        'translation_cancelled': '‚ö†Ô∏è Translation cancelled by user',
        'no_entries_found': 'No SRT entries found in the file.',
        'result_section': 'üì• Result',
        'file_ready': '‚úÖ Translated file ready!',
        'preview_translation': 'üëÄ Translation preview',
        'preview_truncated': '... (preview truncated)',
        'download_file': 'üíæ Download translated file',
        'statistics': 'üìä Statistics',
        'total_lines': 'Total lines',
        'translated_entries': 'Translated entries',
        'upload_info': 'üëÜ Upload an SRT file and start translation to see the result here',
        'usage_guide': 'üìñ Usage Guide',
        'usage_steps': '''**Simple steps:**

1. **Configure Ollama** in the sidebar
2. **Choose languages** source and target
3. **Upload your SRT file**
4. **Click "Start translation"**
5. **Download the result**!

**Supported SRT format:**
```
1
00:00:01,000 --> 00:00:04,000
Hello, world!

2
00:00:05,000 --> 00:00:08,000
How are you today?
```''',
        'interface_language': 'üåê Interface Language'
    }
}

def get_text(key, lang='fr'):
    """R√©cup√®re le texte traduit selon la langue s√©lectionn√©e"""
    return TRANSLATIONS.get(lang, TRANSLATIONS['fr']).get(key, key)

def process_single_file(file, translator, source_lang, target_lang, ui_lang, progress_callback=None, cancel_callback=None):
    """Traite un seul fichier SRT avec callbacks de progression et annulation"""
    # Cr√©er des fichiers temporaires
    with tempfile.NamedTemporaryFile(mode='w+b', suffix='.srt', delete=False) as input_temp:
        input_temp.write(file.read())
        input_temp_path = input_temp.name
    
    with tempfile.NamedTemporaryFile(mode='w+', suffix='.srt', delete=False, encoding='utf-8') as output_temp:
        output_temp_path = output_temp.name
    
    # R√©initialiser le pointeur du fichier
    file.seek(0)
    
    try:
        # Lire et parser le fichier
        try:
            with open(input_temp_path, 'r', encoding='utf-8') as f:
                content = f.read()
        except UnicodeDecodeError:
            try:
                with open(input_temp_path, 'r', encoding='cp1252') as f:
                    content = f.read()
            except:
                with open(input_temp_path, 'r', encoding='latin-1') as f:
                    content = f.read()
        
        entries = translator.parse_srt(content)
        
        if not entries:
            return None, get_text("no_entries_found", ui_lang)
        
        # Traduire chaque entr√©e avec progression
        translated_entries = []
        for i, entry in enumerate(entries):
            # V√©rifier l'annulation
            if cancel_callback and cancel_callback():
                return None, get_text("translation_cancelled", ui_lang)
            
            # Mise √† jour de la progression
            if progress_callback:
                progress_callback(i, len(entries), entry['text'][:50])
            
            translated_text = translator.translate_text(
                entry['text'], 
                source_lang, 
                target_lang
            )
            
            translated_entries.append({
                'number': entry['number'],
                'timestamp': entry['timestamp'],
                'text': translated_text
            })
        
        # √âcrire le fichier traduit
        with open(output_temp_path, 'w', encoding='utf-8') as f:
            for entry in translated_entries:
                f.write(f"{entry['number']}\n")
                f.write(f"{entry['timestamp']}\n")
                f.write(f"{entry['text']}\n\n")
        
        # Lire le contenu traduit
        with open(output_temp_path, 'r', encoding='utf-8') as f:
            translated_content = f.read()
        
        return translated_content, None
        
    finally:
        # Nettoyage
        try:
            os.unlink(input_temp_path)
            os.unlink(output_temp_path)
        except:
            pass

def create_zip_from_files(files_data, target_lang):
    """Cr√©e un fichier ZIP contenant tous les fichiers traduits"""
    zip_buffer = io.BytesIO()
    
    with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
        for original_name, translated_content in files_data:
            # Cr√©er le nom de fichier de sortie
            name_without_ext = Path(original_name).stem
            output_filename = f"{name_without_ext}-{target_lang.upper()}.srt"
            
            # Ajouter le fichier au ZIP
            zip_file.writestr(output_filename, translated_content)
    
    zip_buffer.seek(0)
    return zip_buffer

# Configuration de la page
st.set_page_config(
    page_title="Traducteur SRT", 
    page_icon="üé¨", 
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS pour personnaliser l'apparence
st.markdown("""
<style>
.main-header {
    text-align: center;
    color: #2E86AB;
    padding: 1rem 0;
    border-bottom: 2px solid #f0f2f6;
    margin-bottom: 2rem;
}

.upload-box {
    border: 2px dashed #2E86AB;
    border-radius: 10px;
    padding: 2rem;
    text-align: center;
    margin: 1rem 0;
    background-color: #f8f9fa;
}

.success-box {
    background-color: #d4edda;
    border: 1px solid #c3e6cb;
    border-radius: 5px;
    padding: 1rem;
    margin: 1rem 0;
}

.error-box {
    background-color: #f8d7da;
    border: 1px solid #f5c6cb;
    border-radius: 5px;
    padding: 1rem;
    margin: 1rem 0;
}

.sidebar .sidebar-content {
    background-color: #f8f9fa;
}

.stProgress .st-bo {
    background-color: #2E86AB;
}
</style>
""", unsafe_allow_html=True)

def check_ollama_connection(url):
    """V√©rifie la connexion √† Ollama"""
    try:
        response = requests.get(f"{url}/api/tags", timeout=5)
        return response.status_code == 200
    except:
        return False

def get_available_models(url):
    """R√©cup√®re la liste des mod√®les disponibles"""
    try:
        response = requests.get(f"{url}/api/tags", timeout=5)
        if response.status_code == 200:
            models = response.json().get('models', [])
            return [model['name'] for model in models]
        return []
    except:
        return []

def main():
    # Initialiser la langue dans session_state si elle n'existe pas
    if 'ui_language' not in st.session_state:
        st.session_state.ui_language = 'fr'
    
    # Sidebar pour la configuration
    with st.sidebar:
        # S√©lecteur de langue en haut de la sidebar
        ui_lang = st.selectbox(
            "üåê Language / Langue",
            options=['fr', 'en'],
            format_func=lambda x: "üá´üá∑ Fran√ßais" if x == 'fr' else "üá¨üáß English",
            index=0 if st.session_state.ui_language == 'fr' else 1,
            key="language_selector"
        )
        
        # Mettre √† jour la langue si elle a chang√©
        if ui_lang != st.session_state.ui_language:
            st.session_state.ui_language = ui_lang
            st.rerun()
        
        st.divider()
        
        st.header(get_text("config", ui_lang))
    
        # En-t√™te principal
    st.markdown(f'<h1 class="main-header">{get_text("title", ui_lang)}</h1>', unsafe_allow_html=True)
    
    # Continuer avec la sidebar
    with st.sidebar:
        # Configuration d'Ollama
        st.subheader(get_text("ollama", ui_lang))
        ollama_url = st.text_input(
            get_text("ollama_url", ui_lang), 
            value="http://localhost:11434",
            help=get_text("ollama_url_help", ui_lang)
        )
        
        # Test de connexion
        if st.button(get_text("test_connection", ui_lang)):
            with st.spinner(get_text("testing_connection", ui_lang)):
                if check_ollama_connection(ollama_url):
                    st.success(get_text("connection_success", ui_lang))
                    
                    # R√©cup√©rer les mod√®les disponibles
                    models = get_available_models(ollama_url)
                    if models:
                        st.info(get_text("models_available", ui_lang).format(', '.join(models)))
                else:
                    st.error(get_text("connection_failed", ui_lang))
        
        # S√©lection du mod√®le
        model_name = st.text_input(
            get_text("model_name", ui_lang), 
            value="gemma3:12b",
            help=get_text("model_help", ui_lang)
        )
        
        st.divider()
        
        # Configuration des langues
        st.subheader(get_text("languages", ui_lang))
        
        col1, col2 = st.columns(2)
        with col1:
            source_lang = st.selectbox(
                get_text("source_lang", ui_lang),
                ["anglais", "fran√ßais", "espagnol", "italien", "allemand", "portugais", "chinois", "japonais", "cor√©en", "russe"],
                index=0
            )
        
        with col2:
            target_lang = st.selectbox(
                get_text("target_lang", ui_lang),
                ["fran√ßais", "anglais", "espagnol", "italien", "allemand", "portugais", "chinois", "japonais", "cor√©en", "russe"],
                index=0
            )
        
        st.divider()
        
        # Informations
        st.subheader(get_text("about", ui_lang))
        st.markdown(get_text("about_text", ui_lang))
    
    # Zone principale
    col1, col2 = st.columns([3, 2])
    
    with col1:
        st.header(get_text("upload_section", ui_lang))
        
        # S√©lecteur de mode de traitement
        processing_mode = st.radio(
            get_text("upload_mode", ui_lang),
            options=["single", "batch"],
            format_func=lambda x: get_text("single_file", ui_lang) if x == "single" else get_text("batch_files", ui_lang),
            horizontal=True
        )
        
        # Zone d'upload selon le mode
        if processing_mode == "single":
            uploaded_files = st.file_uploader(
                get_text("choose_file", ui_lang),
                type=['srt'],
                help=get_text("choose_file_help", ui_lang)
            )
            # Convertir en liste pour uniformiser le traitement
            if uploaded_files:
                uploaded_files = [uploaded_files]
        else:
            uploaded_files = st.file_uploader(
                get_text("choose_files", ui_lang),
                type=['srt'],
                accept_multiple_files=True,
                help=get_text("choose_files_help", ui_lang)
            )
        
        if uploaded_files:
            # Affichage des informations des fichiers
            if len(uploaded_files) == 1:
                file = uploaded_files[0]
                st.success(get_text("file_loaded", ui_lang).format(file.name, file.size))
            else:
                total_size = sum(f.size for f in uploaded_files)
                st.success(get_text("files_loaded", ui_lang).format(len(uploaded_files), total_size))
                
                # Afficher la liste des fichiers
                with st.expander(f"üìã {len(uploaded_files)} fichiers s√©lectionn√©s", expanded=False):
                    for i, file in enumerate(uploaded_files, 1):
                        st.write(f"{i}. **{file.name}** ({file.size} octets)")
            
            # Pr√©visualisation du contenu (premier fichier seulement)
            if len(uploaded_files) == 1:
                with st.expander(get_text("preview_file", ui_lang), expanded=False):
                    try:
                        content = uploaded_files[0].read().decode('utf-8')
                        uploaded_files[0].seek(0)  # Reset file pointer
                        
                        # Afficher les premi√®res lignes
                        lines = content.split('\n')[:20]
                        st.code('\n'.join(lines), language='text')
                        
                        if len(content.split('\n')) > 20:
                            st.info(get_text("file_truncated", ui_lang))
                            
                    except UnicodeDecodeError:
                        st.warning(get_text("encoding_warning", ui_lang))
            
            # Bouton de traduction
            if st.button(get_text("start_translation", ui_lang), type="primary", use_container_width=True):
                # V√©rifier la connexion Ollama
                if not check_ollama_connection(ollama_url):
                    st.error(get_text("ollama_connection_error", ui_lang))
                    return
                
                # Cr√©er le traducteur
                translator = SRTTranslator(ollama_url)
                translator.model = model_name
                
                if len(uploaded_files) == 1:
                    # Traitement d'un seul fichier
                    try:
                        file = uploaded_files[0]
                        
                        # Parser le fichier pour conna√Ætre le nombre d'entr√©es
                        file_content = file.read().decode('utf-8')
                        file.seek(0)
                        entries = translator.parse_srt(file_content)
                        
                        if not entries:
                            st.error(get_text("no_entries_found", ui_lang))
                            return
                        
                        # Initialiser l'√©tat d'annulation
                        if 'cancel_translation' not in st.session_state:
                            st.session_state.cancel_translation = False
                        
                        # Interface de progression
                        progress_container = st.container()
                        with progress_container:
                            col_progress, col_cancel = st.columns([4, 1])
                            
                            with col_progress:
                                progress_bar = st.progress(0)
                                status_text = st.empty()
                                status_text.text(get_text("entries_found", ui_lang).format(len(entries)))
                            
                            with col_cancel:
                                if st.button(get_text("cancel_translation", ui_lang), type="secondary", use_container_width=True):
                                    st.session_state.cancel_translation = True
                                    st.rerun()
                        
                        # Callbacks pour la progression et l'annulation
                        def update_progress(current, total, current_text):
                            progress = (current + 1) / total
                            progress_bar.progress(progress)
                            # Affichage d√©taill√© : "5/342 : <texte>"
                            status_text.text(f"{current + 1}/{total} : {current_text}")
                        
                        def check_cancel():
                            return st.session_state.get('cancel_translation', False)
                        
                        # Traiter le fichier avec progression en temps r√©el
                        translated_content, error = process_single_file(
                            file, translator, source_lang, target_lang, ui_lang,
                            progress_callback=update_progress,
                            cancel_callback=check_cancel
                        )
                        
                        if error:
                            if "annul√©e" in error or "cancelled" in error:
                                st.warning(error)
                                st.session_state.cancel_translation = False
                            else:
                                st.error(error)
                            return
                        
                        progress_bar.progress(1.0)
                        status_text.text(get_text("translation_completed", ui_lang))
                        
                        # Stocker dans la session
                        st.session_state['translated_content'] = translated_content
                        st.session_state['original_filename'] = file.name
                        st.session_state['processing_mode'] = 'single'
                        st.session_state.cancel_translation = False
                        
                        st.success(get_text("translation_success", ui_lang))
                        
                    except Exception as e:
                        st.error(get_text("translation_error", ui_lang).format(str(e)))
                        st.session_state.cancel_translation = False
                
                else:
                    # Traitement en lot
                    try:
                        # Initialiser l'√©tat d'annulation
                        if 'cancel_translation' not in st.session_state:
                            st.session_state.cancel_translation = False
                        
                        # Interface de progression
                        progress_container = st.container()
                        with progress_container:
                            col_progress, col_cancel = st.columns([4, 1])
                            
                            with col_progress:
                                progress_bar = st.progress(0)
                                file_status = st.empty()  # Pour afficher le fichier en cours
                                status_text = st.empty()  # Pour afficher la progression d√©taill√©e
                            
                            with col_cancel:
                                if st.button(get_text("cancel_translation", ui_lang), type="secondary", use_container_width=True, key="cancel_batch"):
                                    st.session_state.cancel_translation = True
                                    st.rerun()
                        
                        translated_files_data = []
                        total_files = len(uploaded_files)
                        
                        for i, file in enumerate(uploaded_files):
                            # V√©rifier l'annulation
                            if st.session_state.get('cancel_translation', False):
                                st.warning(get_text("translation_cancelled", ui_lang))
                                st.session_state.cancel_translation = False
                                return
                            
                            # Callback pour v√©rifier l'annulation pendant la traduction du fichier
                            def check_cancel():
                                return st.session_state.get('cancel_translation', False)
                            
                            # Callback pour la progression d√©taill√©e de chaque fichier
                            def update_detailed_progress(current_entry, total_entries, current_text):
                                # Progression globale des fichiers
                                file_progress = i / total_files
                                # Progression interne du fichier actuel
                                entry_progress = (current_entry + 1) / total_entries if total_entries > 0 else 0
                                # Progression combin√©e
                                combined_progress = (i + entry_progress) / total_files
                                
                                progress_bar.progress(combined_progress)
                                # Affichage du fichier en cours
                                file_status.text(get_text("batch_processing", ui_lang).format(i+1, total_files, file.name))
                                # Affichage d√©taill√© : "5/342 : <texte>"
                                status_text.text(f"{current_entry + 1}/{total_entries} : {current_text}")
                            
                            # Mise √† jour initiale
                            file_status.text(get_text("batch_processing", ui_lang).format(i+1, total_files, file.name))
                            status_text.text(get_text("initializing", ui_lang))
                            
                            # Traiter le fichier avec progression d√©taill√©e
                            translated_content, error = process_single_file(
                                file, translator, source_lang, target_lang, ui_lang,
                                progress_callback=update_detailed_progress,
                                cancel_callback=check_cancel
                            )
                            
                            if error:
                                if "annul√©e" in error or "cancelled" in error:
                                    st.warning(get_text("translation_cancelled", ui_lang))
                                    st.session_state.cancel_translation = False
                                    return
                                else:
                                    st.warning(f"‚ö†Ô∏è Erreur avec {file.name}: {error}")
                                    continue
                            
                            translated_files_data.append((file.name, translated_content))
                        
                        progress_bar.progress(1.0)
                        file_status.text("üéâ " + get_text("batch_completed", ui_lang).format(len(translated_files_data)))
                        status_text.text(get_text("batch_success", ui_lang))
                        
                        # Stocker dans la session
                        st.session_state['translated_files_data'] = translated_files_data
                        st.session_state['processing_mode'] = 'batch'
                        st.session_state['target_lang'] = target_lang
                        st.session_state.cancel_translation = False
                        
                        st.success(get_text("batch_completed", ui_lang).format(len(translated_files_data)))
                        
                    except Exception as e:
                        st.error(get_text("translation_error", ui_lang).format(str(e)))
                        st.session_state.cancel_translation = False
    
    with col2:
        st.header(get_text("result_section", ui_lang))
        
        # V√©rifier le mode de traitement
        processing_mode = st.session_state.get('processing_mode', 'single')
        
        if processing_mode == 'single' and 'translated_content' in st.session_state and st.session_state['translated_content']:
            # Traitement d'un seul fichier
            st.success(get_text("file_ready", ui_lang))
            
            # Aper√ßu du r√©sultat
            with st.expander(get_text("preview_translation", ui_lang), expanded=True):
                lines = st.session_state['translated_content'].split('\n')[:15]
                st.code('\n'.join(lines), language='text')
                
                if len(st.session_state['translated_content'].split('\n')) > 15:
                    st.info(get_text("preview_truncated", ui_lang))
            
            # Nom du fichier de sortie
            original_name = st.session_state.get('original_filename', 'subtitle.srt')
            name_without_ext = Path(original_name).stem
            output_filename = f"{name_without_ext}-{target_lang.upper()}.srt"
            
            # Bouton de t√©l√©chargement
            st.download_button(
                label=get_text("download_file", ui_lang),
                data=st.session_state['translated_content'],
                file_name=output_filename,
                mime="text/plain",
                type="primary",
                use_container_width=True
            )
            
            # Statistiques
            st.subheader(get_text("statistics", ui_lang))
            lines_count = len([line for line in st.session_state['translated_content'].split('\n') if line.strip()])
            entries_count = st.session_state['translated_content'].count('\n\n')
            
            col_stat1, col_stat2 = st.columns(2)
            with col_stat1:
                st.metric(get_text("total_lines", ui_lang), lines_count)
            with col_stat2:
                st.metric(get_text("translated_entries", ui_lang), entries_count)
        
        elif processing_mode == 'batch' and 'translated_files_data' in st.session_state and st.session_state['translated_files_data']:
            # Traitement en lot
            files_data = st.session_state['translated_files_data']
            batch_target_lang = st.session_state.get('target_lang', target_lang)
            
            st.success(get_text("batch_completed", ui_lang).format(len(files_data)))
            
            # Liste des fichiers traduits
            with st.expander(f"üìã {len(files_data)} fichiers traduits", expanded=True):
                for i, (original_name, _) in enumerate(files_data, 1):
                    name_without_ext = Path(original_name).stem
                    output_name = f"{name_without_ext}-{batch_target_lang.upper()}.srt"
                    st.write(f"{i}. **{output_name}**")
            
            # Aper√ßu du premier fichier
            if files_data:
                with st.expander(get_text("preview_translation", ui_lang), expanded=False):
                    first_file_content = files_data[0][1]
                    lines = first_file_content.split('\n')[:15]
                    st.code('\n'.join(lines), language='text')
                    
                    if len(first_file_content.split('\n')) > 15:
                        st.info(get_text("preview_truncated", ui_lang))
            
            # Bouton de t√©l√©chargement ZIP
            if st.button(get_text("download_all", ui_lang), type="primary", use_container_width=True):
                # Cr√©er le ZIP
                zip_buffer = create_zip_from_files(files_data, batch_target_lang)
                
                # Bouton de t√©l√©chargement
                st.download_button(
                    label="üì¶ T√©l√©charger le fichier ZIP",
                    data=zip_buffer.getvalue(),
                    file_name=f"subtitles-{batch_target_lang.upper()}.zip",
                    mime="application/zip",
                    use_container_width=True
                )
            
            # Statistiques
            st.subheader(get_text("statistics", ui_lang))
            total_lines = sum(len([line for line in content.split('\n') if line.strip()]) for _, content in files_data)
            total_entries = sum(content.count('\n\n') for _, content in files_data)
            
            col_stat1, col_stat2 = st.columns(2)
            with col_stat1:
                st.metric("Fichiers traduits", len(files_data))
            with col_stat2:
                st.metric(get_text("translated_entries", ui_lang), total_entries)
        
        else:
            st.info(get_text("upload_info", ui_lang))
            
            # Exemple d'utilisation
            with st.expander(get_text("usage_guide", ui_lang)):
                st.markdown(get_text("usage_steps", ui_lang))

if __name__ == "__main__":
    main() 